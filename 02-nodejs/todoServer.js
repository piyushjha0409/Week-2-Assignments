/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
    - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
    - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express')
var fs = require('fs')
var bodyParser = require('body-parser');
const path = require('path');

const app = express();


app.use(bodyParser.json());
const PORT = 3000;

//defining the home route 
app.get('/', (req, res)=>{
  console.log("Hello world! this is your express server!")
})

app.listen(PORT, ()=> {
  console.log(`The server is ruuning in the port ${PORT}`)
})

// function for finding the index 
const findIndex = (arr, id) => {
  for(let i=0; i<arr.length; i++){
    if(arr[i] !== index){
      return i;
    }
  }
}
//here all the data will be stored
const dataStore = []


//fetching all the todos from the array
app.get('/todos', (req, res)=> {
  fs.readFile('todo.json', 'utf-8', (err, data) => {
    if(err) throw err;
    const todos = JSON.parse(data);
    const todosIndex = findIndex(todos, parseInt(req.params.id))
  })
  res.status(200).json(dataStore);
}) 

//fetching the individual todo 
app.get('/todos/:id', (req, res)=> {
   const todoID = parseInt(req.params.id);
   
   const foundTodo = dataStore.find(todo => todo.id === todoID)

   if(!foundTodo){
    return res.status(200).json({ message: "TODO is not found!"})
   }
   res.json(foundTodo);
});


//addding the todos 
app.post('/todos', (req, res)=> {
  const newTodo = {
    id: Math.floor(Math.random() * 1000),
    title: req.body.title,
    desc: req.body.desc
  }
  console.log(newTodo.id)
  //adding the todo into the array database
  dataStore.push(newTodo)
  saveDataFile()
  return res.status(201).json({message: "Added succesfully"})
})

//api for updating the todo desc
app.put("/todos/:id", (req, res)=> {
   //read the file of todo.json 
   fs.readFile('todo.json', 'utf-8', (err, res)=> {
    if(err){
      throw err;
    }
    const todos = JSON.parse(res);
    const todosIndex = findIndex(todos, parseInt(req.params.id))
    if(todosIndex === -1 ){
      res.status(404).send();
    }else{
      const updatedTodo = {
        id: todos[req.params.id],
        title: req.body.title,
        desc: req.body.desc
      };
      //afterall we are manipulating the array
      todos[todoIndex] = updatedTodo
    }
   })
})


//api for deleting the todo 
app.delete("/delete/:id", (req, res)=> {
   try{
   const id = parseInt(req.params.id);
   dataStore = dataStore.filter((todo)=> todo.id !== id);
   saveDataFile()
   res.status(200).json({message: "Successfully deleted the todo item"})
   }catch(err){
    res.status(201).json({message: err})
   }
  
})

module.exports = app;
 